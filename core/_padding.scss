$sizes: '-xxl', '-xl', '-lg', '-ml', '-md', '-sm', '-xs';
$screenSize: $xxlScreen, $xlScreen, $lgScreen, $mlScreen, $mdScreen, $smScreen, $xsScreen;
$directions: padding, padding-top, padding-right, padding-bottom, padding-left, (padding-left, padding-right), (padding-top, padding-bottom);
$directionAb: '','t','r','b','l', 'x', 'y';
$variants:
    ('-uns'),
    ('-ini'),
    ('0', '1', '2', '3', '4', '5', '6'),
    ('10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '60', '65', '70', '75', '80', '85', '90', '95', '100'),
    ('01-rem','02-rem','03-rem','04-rem','05-rem','06-rem','07-rem','08-rem','09-rem', '1-rem','2-rem','3-rem','4-rem','5-rem','6-rem','7-rem','8-rem','9-rem'),
    ('1-px', '2-px', '3-px', '4-px', '5-px', '6-px', '7-px', '8-px', '9-px', '10-px', '20-px', '30-px', '40-px', '50-px', '60-px', '70-px', '80-px', '90-px', '100-px', '200-px', '300-px', '400-px');
$variantValues:
    (unset),
    (initial),
    (0, $size-1, $size-2, $size-3, $size-4, $size-5, $size-6),
    (5%, 10%, 15%, 20%, 25%, 30%, 35%, 40%, 45%, 50%, 55%, 60%, 65%, 70%, 75%, 80%, 85%, 90%, 95%, 100%),
    (0.1rem, 0.2rem, 0.3rem, 0.4rem, 0.5rem, 0.6rem, 0.7rem, 0.8rem, 0.9rem, 1rem, 2rem, 3rem, 4rem, 5rem, 6rem, 7rem, 8rem, 9rem),
    (1px, 2px, 3px, 4px, 5px, 6px, 7px, 8px, 9px, 10px, 20px, 30px, 40px, 50px, 60px, 70px, 80px, 90px, 100px, 200px, 300px, 400px);

$count: 0;

// For each direction (Top, Right, Bottom, Left)
@each $direction in $directions{
    // For each different variant (uns, ini, $size, %, rem, px)
    @each $variant in $variants {
        $currentDirectionIndex: index($directions, $direction);
        $currentVariant: index($variants, $variant);
        // For each different value (0, 1rem, 2rem, ...)
        @each $value in $variant{
            $currentValueList: nth($variantValues, $currentVariant);
            $currentValueIndex: index($variant, $value);
            $styleCount: length(nth($directions, $currentDirectionIndex));
                    $valueToSet: nth($currentValueList, $currentValueIndex);
                    $styles: nth($directions, $currentDirectionIndex);
                    @if $styleCount > 1{
                        .p#{nth($directionAb, $currentDirectionIndex)}#{$value}{
                            #{nth($styles, 1)}: $valueToSet;
                            #{nth($styles, 2)}: $valueToSet;
                        }
                    }
                    @else{
                        .p#{nth($directionAb, $currentDirectionIndex)}#{$value}{
                            #{nth($styles, 1)}: $valueToSet;
                        }
                    }
            $count:$count+1;
        }
    }
}
// For each screen size (xxl, xl, lg, ml, md, sm, xs)
@each $size in $sizes{
    @media only screen and (max-width: nth($screenSize,  index($sizes, $size))) {
        // For each direction (Top, Right, Bottom, Left)
        @each $direction in $directions{
            // For each different variant (uns, ini, $size, %, rem, px)
            @each $variant in $variants {
                $currentDirectionIndex: index($directions, $direction);
                $currentVariant: index($variants, $variant);
                // For each different value (0, 1rem, 2rem, ...)
                @each $value in $variant{
                    $currentValueList: nth($variantValues, $currentVariant);
                    $currentValueIndex: index($variant, $value);
                    $styleCount: length(nth($directions, $currentDirectionIndex));
                    $valueToSet: nth($currentValueList, $currentValueIndex);
                    $styles: nth($directions, $currentDirectionIndex);
                    @if $styleCount > 1{
                        .p#{nth($directionAb, $currentDirectionIndex)}#{$value}#{$size}{
                            #{nth($styles, 1)}: $valueToSet !important;
                            #{nth($styles, 2)}: $valueToSet !important;
                        }
                    }
                    @else{
                        .p#{nth($directionAb, $currentDirectionIndex)}#{$value}#{$size}{
                            #{nth($styles, 1)}: $valueToSet !important;
                        }
                    }
                    $count:$count+1;
                }
            }
        }
    }
}
@debug "Added #{$count} padding classes";
